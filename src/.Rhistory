}
}
compare_high_risk_area <- function(lrr, cov_indiv, cov_ha, excluded_polys=NULL){
hr_polys <- lrr$lrr.poly %>% filter(risk=="Higher risk") %>% pull(polyID)
for(id in hr_polys[!hr_polys %in% excluded_polys]){
cat("\n------------------------------------")
cat(paste("\nHIGH-RISK AREA N°", id, "\n"))
cat("------------------------------------\n")
area.ha <- lrr$lrr.ha %>% mutate(risk=factor(if_else(polyID==id, "high", "other"))) %>% select(-c(polyID))
stats <- area.ha %>% filter(risk=="high") %>% summarise(nPTOT=sum(PTOT, na.rm=TRUE), nHTOT = sum(HTOT, na.rm=TRUE))
cat(paste("PTOT: ", stats %>% pull(nPTOT), "HTOT", stats %>% pull(nHTOT), "\n"))
area.indiv <- lrr$lrr.indiv %>% mutate(risk=factor(if_else(polyID==id, "high", "other"))) %>% select(-c(polyID))
compare_areas(area.indiv, area.ha, cov.indiv, cov.ha)
}
}
# DIABETES ----------------------------------------------------------------
# sink("../results/spatial_disease_risk/diabetes/spatial_variation_risk_diabetes.txt")
# cat(paste0("Date:", Sys.Date(),'\n')) #Overwrite the file
diab.data <- select_outcome_spatial(indiv, "diabetes", cov=cov.indiv)
plot_case_control(diab.data, laus$extent, buildings, title='Diabetes')
source('descriptive/utils_spatial_clustering_outcomes.R')
plot_case_control(diab.data, laus$extent, buildings, title='Diabetes')
plot_case_control(diab.data, laus$extent, build, title='Diabetes')
diab.data <- select_outcome_spatial(indiv, "diabetes", cov=cov.indiv)
plot_case_control(diab.data, laus$extent, build, title='Diabetes')
source('descriptive/utils_spatial_clustering_outcomes.R')
plot_case_control(diab.data, laus$extent, build, title='Diabetes')
# Create PPP
diab.events <- create_ppp(diab.data, laus$extent, marks=diab.data$outcome, title="Diabetes - events")
# Log relative risk surface
optimal_bandwidths(diab.events)
diab.lrr <- log_ratio_spatial_dens(diab.events, 400, nsim=999, seed=12345, outcome_name="diabetes", bandwidth = 400)
diab.lrr <- log_ratio_spatial_dens(diab.events, 400, nsim=999, seed=12345, outcome_name="diabetes")
source('descriptive/utils_spatial_clustering_outcomes.R')
diab.lrr <- log_ratio_spatial_dens(diab.events, 400, nsim=999, seed=12345, outcome_name="diabetes")
# Save rasters to create maps in QGIS
save_raster_lrr(diab.lrr, "diabetes", 400)
# Extract data for risk areas
diab.areas <- polygonize_logrr(diab.lrr$smacpod_risk, ha %>% dplyr::select(reli, all_of(cov.ha), geometry), diab.data)
map_extracted_areas(diab.lrr, diab.areas, "diabetes")
# Plot significant areas
map_significant_areas(diab.areas$lrr.poly, dem, basemap_type = "raster", title="Diabetes")
# Compare individual and neighborhood factors between risk areas
compare_areas(diab.areas$lrr.indiv, diab.areas$lrr.ha, cov.indiv, cov.ha)
# Check if some areas need to be merged
map_high_risk_areas(diab.areas$lrr.poly, laus$extent)
# Merge polygons 4-5
diab.areas <- merge_polygons(diab.areas, 4, 5)
map_high_risk_areas(diab.areas$lrr.poly, laus$extent)
compare_high_risk_area(diab.areas, cov.indiv, cov.ha, excluded_poly=c(4))
sink()
plot(diab.lrr$sparr_risk$f)
source('descriptive/utils_spatial_clustering_outcomes.R')
diab.lrr <- log_ratio_spatial_dens(diab.events, diab.bandwidth, nsim=999, seed=12345, outcome_name="diabetes")
diab.bandwidth <- 400
diab.lrr <- log_ratio_spatial_dens(diab.events, diab.bandwidth, nsim=999, seed=12345, outcome_name="diabetes")
# Log relative risk surface
optimal_bandwidths(diab.events)
diab.bandwidth <- 150
diab.lrr <- log_ratio_spatial_dens(diab.events, diab.bandwidth, nsim=999, seed=12345, outcome_name="diabetes")
diab.bandwidth <- 850
diab.lrr <- log_ratio_spatial_dens(diab.events, diab.bandwidth, nsim=999, seed=12345, outcome_name="diabetes")
diab.bandwidth <- 850
diab.lrr <- log_ratio_spatial_dens(diab.events, diab.bandwidth, nsim=999, seed=12345, outcome_name="diabetes")
diab.bandwidth <- 400
diab.lrr <- log_ratio_spatial_dens(diab.events, diab.bandwidth, nsim=999, seed=12345, outcome_name="diabetes")
png(paste0("../results/spatial_disease_risk/",outcome_name,"/cases_density_diabetes", diab.bandwidth, ".png"),
width=300, height=200, units=c("mm"), res=100)
png(paste0("../results/spatial_disease_risk/diabetes/cases_density_diabetes", diab.bandwidth, ".png"),
width=300, height=200, units=c("mm"), res=100)
plot(diab.lrr$sparr_risk$f)
#plot(diab.lrr$sparr_risk$g)
dev.off()
png(paste0("../results/spatial_disease_risk/diabetes/cases_density_diabetes", diab.bandwidth, ".png"),
width=300, height=200, units=c("mm"), res=100)
#plot(diab.lrr$sparr_risk$f)
plot(diab.lrr$sparr_risk$g)
dev.off()
png(paste0("../results/spatial_disease_risk/diabetes/controls_intensity_diabetes", diab.bandwidth, ".png"),
width=300, height=200, units=c("mm"), res=100)
#plot(diab.lrr$sparr_risk$f)
plot(diab.lrr$sparr_risk$g)
dev.off()
png(paste0("../results/spatial_disease_risk/diabetes/controls_density_diabetes", diab.bandwidth, ".png"),
width=300, height=200, units=c("mm"), res=100)
plot(diab.lrr$sparr_risk$f)
#plot(diab.lrr$sparr_risk$g)
dev.off()
?risk
data <- data.frame(x = rnorm(1000))
# Create a density plot with multiple kernel density estimates
ggplot(data, aes(x)) +
geom_density(aes(y = ..density..), kernel = "gaussian", bw = 800, fill = "red", alpha = 0.3) +
geom_density(aes(y = ..density..), kernel = "gaussian", bw = 400, fill = "blue", alpha = 0.3) +
geom_density(aes(y = ..density..), kernel = "rectangular", bw = 400, fill = "green", alpha = 0.3) +
labs(title = "Density Plot with Different Kernel Density Estimates")
data <- data.frame(x = rnorm(1000))
# Create a density plot with multiple kernel density estimates
ggplot(data, aes(x)) +
geom_density(aes(y = after_stat(density)), kernel = "gaussian", bw = 800, fill = "red", alpha = 0.3) +
geom_density(aes(y = after_stat(density)), kernel = "gaussian", bw = 400, fill = "blue", alpha = 0.3) +
geom_density(aes(y = after_stat(density)), kernel = "rectangular", bw = 400, fill = "green", alpha = 0.3) +
labs(title = "Density Plot with Different Kernel Density Estimates")
# This code computes the log relative risk surface of chronic diseases, and investigate associated individual & neighborhood characteristics.
setwd("/mnt/data/GEOSAN/RESEARCH PROJECTS/GEOCHRONIC @ LASIG (EPFL)/GEOSAN-geochronic/src/")
require(svglite)
source('/mnt/data/GEOSAN/FUNCTIONS/GIRAPH-functions/geosan_funcs/password_utils.R')
source('descriptive/utils_spatial_clustering_outcomes.R')
con <- dbConnect(drv=RPostgreSQL::PostgreSQL(),host = "localhost",user= "aladoy",rstudioapi::askForPassword(),dbname="geosan")
# LOAD DATASETS -----------------------------------------------------------
indiv <- load_participants(con)
laus <- load_boundaries(con)
ha <- load_hectares(con)
dem <- raster("/mnt/data/GEOSAN/GEOSAN DB/data/MODELE NUMERIQUE HAUTEUR LAUSANNE/lausanne_dem_final_5m.tif")
# Basemap
build <- st_read(dsn="/mnt/data/GEOSAN/RESEARCH PROJECTS/COMMUNE EN SANTE @ UNISANTE/commune-en-sante/qgis/layers/admin_boundaries.gpkg", layer="vd_buildings")
build <- build %>% filter(st_intersects(., laus$extent, sparse = FALSE))
# Covariates
cov.indiv <- c("age", "sex", "swiss", "cohabiting", "education", "working", "difficulties", "smoking", "drinking", "inactivity")
cov.ha <- c("PTOT", "HTOT", "D_SPORT", "N_ACC_PED", "GREEN_SP", "NOISE", "PM25", "NO2", "P_65_M", "MEDREV", "R_UNEMP", "R_NN_POBL", "R_FFB", "R_NN_FRA", "AVG_PPH", "D_STOP_TOT")
compare_areas <- function(area_indiv, area_ha, cov_indiv, cov_ha){
for(bin_var in cov.indiv[!cov_indiv %in% c("age")]){
compare_risk_groups(area_indiv, bin_var, type="bin")
}
compare_risk_groups(area_indiv, "age", type="cont")
for(cont_var in cov_ha){
compare_risk_groups(area_ha, cont_var, type="cont")
}
}
compare_high_risk_area <- function(lrr, cov_indiv, cov_ha, excluded_polys=NULL){
hr_polys <- lrr$lrr.poly %>% filter(risk=="Higher risk") %>% pull(polyID)
for(id in hr_polys[!hr_polys %in% excluded_polys]){
cat("\n------------------------------------")
cat(paste("\nHIGH-RISK AREA N°", id, "\n"))
cat("------------------------------------\n")
area.ha <- lrr$lrr.ha %>% mutate(risk=factor(if_else(polyID==id, "high", "other"))) %>% select(-c(polyID))
stats <- area.ha %>% filter(risk=="high") %>% summarise(nPTOT=sum(PTOT, na.rm=TRUE), nHTOT = sum(HTOT, na.rm=TRUE))
cat(paste("PTOT: ", stats %>% pull(nPTOT), "HTOT", stats %>% pull(nHTOT), "\n"))
area.indiv <- lrr$lrr.indiv %>% mutate(risk=factor(if_else(polyID==id, "high", "other"))) %>% select(-c(polyID))
compare_areas(area.indiv, area.ha, cov.indiv, cov.ha)
}
}
data <- data.frame(x = rnorm(1000))
# Create a density plot with multiple kernel density estimates
ggplot(data, aes(x)) +
geom_density(aes(y = after_stat(density)), kernel = "gaussian", bw = 800, fill = "red", alpha = 0.3) +
geom_density(aes(y = after_stat(density)), kernel = "gaussian", bw = 400, fill = "blue", alpha = 0.3) +
geom_density(aes(y = after_stat(density)), kernel = "rectangular", bw = 400, fill = "green", alpha = 0.3) +
labs(title = "Density Plot with Different Kernel Density Estimates")
density(data, kernel="gaussian")
d <- data.frame(x = rnorm(1000))
density(d, kernel="gaussian")
d <- rnorm(1000)
density(d, kernel="gaussian")
plot(density(d, kernel="gaussian")
)
?gaussian_kernel
??gaussian_kernel
data <- data.frame(x = rnorm(1000))
# Plot the Gaussian kernel density estimate
ggplot(data, aes(x)) +
stat_density(geom = "density", kernel = "gaussian", bw = 0.2, fill = "blue", alpha = 0.3) +
labs(title = "Gaussian Kernel Density Estimate")
data <- data.frame(x = dnorm(1000))
ggplot(data, aes(x)) +
stat_density(geom = "density", kernel = "gaussian", bw = 0.2, fill = "blue", alpha = 0.3) +
labs(title = "Gaussian Kernel Density Estimate")
data <- data.frame(x = dnorm(1000))
# Plot the Gaussian kernel density estimate
ggplot(data, aes(x)) +
stat_density(geom = "density", kernel = "gaussian", bw = 0.2, fill = "blue", alpha = 0.3) +
labs(title = "Gaussian Kernel Density Estimate")
x <- seq(-4, 4, length.out = 1000)
y <- dnorm(x, mean = 0, sd = 1)
# Plot the perfect Gaussian kernel density curve
ggplot(data.frame(x, y), aes(x, y)) +
geom_line() +
labs(title = "Perfect Gaussian Kernel Density Curve")
x <- seq(-4, 4, length.out = 1000)
y_gauss_300 <- dnorm(x, mean = 0, sd = 0.3)
y_gauss_800 <- dnorm(x, mean = 0, sd = 0.8)
y_uniform <- dunif(x, min = -2, max = 2)
x <- seq(-4, 4, length.out = 1000)
y_gauss_300 <- dnorm(x, mean = 0, sd = 0.3)
y_gauss_800 <- dnorm(x, mean = 0, sd = 0.8)
y_uniform <- dunif(x, min = -2, max = 2)
# Create a data frame with the x and y values for each kernel density curve
df <- data.frame(x = x, y_gauss_300 = y_gauss_300, y_gauss_800 = y_gauss_800, y_uniform = y_uniform)
# Plot the three kernel density curves overlaid on the same plot
ggplot(df, aes(x)) +
geom_line(aes(y = y_gauss_300), color = "blue", size = 1) +
geom_line(aes(y = y_gauss_800), color = "red", size = 1) +
geom_line(aes(y = y_uniform), color = "green", size = 1) +
labs(title = "Kernel Density Curves") +
theme_classic()
x <- rnorm(100, mean = 0, sd = 1)
# Calculate the density estimate with a rectangular kernel of bandwidth 300
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
# Plot the density estimate
ggplot(data.frame(x = d_rect_300$x, y = d_rect_300$y), aes(x, y)) +
geom_line() +
labs(title = "Density Estimate with Rectangular Kernel of Bandwidth 300") +
theme_classic()
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
ggplot(data.frame(x = d_gauss_300$x, y = d_gauss_300$y), aes(x, y)) +
geom_line() +
labs(title = "Density Estimate with Rectangular Kernel of Bandwidth 300") +
theme_classic()
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_800 <- density(x, kernel = "gaussian", bw = 800)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_800 <- data.frame(x = d_gauss_800$x, y = d_gauss_800$y)
ggplot() +
geom_line(data = df_rect_300, aes(x = x, y = y, color = "Rectangular Bandwidth 300")) +
geom_line(data = df_gauss_300, aes(x = x, y = y, color = "Gaussian Bandwidth 300")) +
geom_line(data = df_gauss_800, aes(x = x, y = y, color = "Gaussian Bandwidth 800")) +
labs(title = "Kernel Density Estimates",
x = "x",
y = "Density") +
scale_color_manual(values = c("blue", "green", "red")) +
theme_classic()
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_100 <- density(x, kernel = "gaussian", bw = 100)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_100 <- data.frame(x = df_gauss_100$x, y = df_gauss_100$y)
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_100 <- density(x, kernel = "gaussian", bw = 100)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_100 <- data.frame(x = df_gauss_100$x, y = df_gauss_100$y)
d_gauss_100 <- density(x, kernel = "gaussian", bw = 100)
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_100 <- density(x, kernel = "gaussian", bw = 100)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_100 <- data.frame(x = df_gauss_100$x, y = df_gauss_100$y)
ggplot() +
geom_line(data = df_rect_300, aes(x = x, y = y, color = "Rectangular Bandwidth 300")) +
geom_line(data = df_gauss_300, aes(x = x, y = y, color = "Gaussian Bandwidth 300")) +
geom_line(data = df_gauss_100, aes(x = x, y = y, color = "Gaussian Bandwidth 100")) +
labs(title = "Kernel Density Estimates",
x = "x",
y = "Density") +
scale_color_manual(values = c("blue", "green", "red")) +
theme_classic()
ggplot() +
geom_line(data = df_rect_300, aes(x = x, y = y, color = "Rectangular Bandwidth 300")) +
geom_line(data = df_gauss_300, aes(x = x, y = y, color = "Gaussian Bandwidth 300")) +
geom_line(data = df_gauss_100, aes(x = x, y = y, color = "Gaussian Bandwidth 100")) +
labs(title = "Kernel Density Estimates",
x = "x",
y = "Density") +
scale_color_manual(values = c("blue", "green", "red")) +
theme_classic()
df_gauss_100 <- data.frame(x = df_gauss_100$x, y = df_gauss_100$y)
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_100 <- density(x, kernel = "gaussian", bw = 100)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_100 <- data.frame(x = d_gauss_100$x, y = d_gauss_100$y)
ggplot() +
geom_line(data = df_rect_300, aes(x = x, y = y, color = "Rectangular Bandwidth 300")) +
geom_line(data = df_gauss_300, aes(x = x, y = y, color = "Gaussian Bandwidth 300")) +
geom_line(data = df_gauss_100, aes(x = x, y = y, color = "Gaussian Bandwidth 100")) +
labs(title = "Kernel Density Estimates",
x = "x",
y = "Density") +
scale_color_manual(values = c("blue", "green", "red")) +
theme_classic()
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_100 <- density(x, kernel = "gaussian", bw = 100)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_100 <- data.frame(x = d_gauss_100$x, y = d_gauss_100$y)
ggplot() +
geom_line(data = df_rect_300, aes(x = x, y = y, color = "Rectangular Bandwidth 300")) +
geom_line(data = df_gauss_300, aes(x = x, y = y, color = "Gaussian Bandwidth 300")) +
geom_line(data = df_gauss_100, aes(x = x, y = y, color = "Gaussian Bandwidth 100")) +
labs(title = "Kernel Density Estimates",
x = "x",
y = "Density") +
scale_color_manual(values = c("blue", "green", "red")) +
theme_bw()
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_100 <- density(x, kernel = "gaussian", bw = 100)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_100 <- data.frame(x = d_gauss_100$x, y = d_gauss_100$y)
ggplot() +
geom_line(data = df_rect_300, aes(x = x, y = y, color = "Rectangular Bandwidth 300")) +
geom_line(data = df_gauss_300, aes(x = x, y = y, color = "Gaussian Bandwidth 300")) +
geom_line(data = df_gauss_100, aes(x = x, y = y, color = "Gaussian Bandwidth 100")) +
labs(x = "x",
y = "Density") +
scale_color_manual(values = c("blue", "green", "red")) +
theme_bw()
?scale_color_manual
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_100 <- density(x, kernel = "gaussian", bw = 100)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_100 <- data.frame(x = d_gauss_100$x, y = d_gauss_100$y)
ggplot() +
geom_line(data = df_rect_300, aes(x = x, y = y, color = "Rectangular Bandwidth 300")) +
geom_line(data = df_gauss_300, aes(x = x, y = y, color = "Gaussian Bandwidth 300")) +
geom_line(data = df_gauss_100, aes(x = x, y = y, color = "Gaussian Bandwidth 100")) +
labs(x = "x",
y = "Density") +
scale_color_manual(values = c("blue", "green", "red"), name="Kernel") +
theme_bw()
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_200 <- density(x, kernel = "gaussian", bw = 200)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_200 <- data.frame(x = d_gauss_200$x, y = d_gauss_200$y)
ggplot() +
geom_line(data = df_rect_300, aes(x = x, y = y, color = "Rectangular Bandwidth 300")) +
geom_line(data = df_gauss_300, aes(x = x, y = y, color = "Gaussian Bandwidth 300")) +
geom_line(data = df_gauss_200, aes(x = x, y = y, color = "Gaussian Bandwidth 100")) +
labs(x = "x",
y = "Density") +
scale_color_manual(values = c("blue", "green", "red"), name="Kernel") +
theme_bw()
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_200 <- density(x, kernel = "gaussian", bw = 200)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_200 <- data.frame(x = d_gauss_200$x, y = d_gauss_200$y)
ggplot() +
geom_line(data = df_rect_300, aes(x = x, y = y, color = "Uniform kernel (b=300)")) +
geom_line(data = df_gauss_300, aes(x = x, y = y, color = "Gaussian kernel (b=300)")) +
geom_line(data = df_gauss_200, aes(x = x, y = y, color = "Gaussian kernel (b=100)")) +
labs(x = "x",
y = "Density") +
scale_color_manual(values = c("#2dd4dc", "#092c86", "#f6546a"), name="Kernel") +
theme_bw()
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_200 <- density(x, kernel = "gaussian", bw = 200)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_200 <- data.frame(x = d_gauss_200$x, y = d_gauss_200$y)
ggplot() +
geom_line(data = df_rect_300, aes(x = x, y = y, color = "Uniform kernel (b=300)")) +
geom_line(data = df_gauss_300, aes(x = x, y = y, color = "Gaussian kernel (b=300)")) +
geom_line(data = df_gauss_200, aes(x = x, y = y, color = "Gaussian kernel (b=100)")) +
labs(x = "x",
y = "Density") +
scale_color_manual(values = c("#2dd4dc", "#092c86", "#f6546a"), name="Kernel") +
theme_bw() +
them(    legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_200 <- density(x, kernel = "gaussian", bw = 200)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_200 <- data.frame(x = d_gauss_200$x, y = d_gauss_200$y)
ggplot() +
geom_line(data = df_rect_300, aes(x = x, y = y, color = "Uniform kernel (b=300)")) +
geom_line(data = df_gauss_300, aes(x = x, y = y, color = "Gaussian kernel (b=300)")) +
geom_line(data = df_gauss_200, aes(x = x, y = y, color = "Gaussian kernel (b=100)")) +
labs(x = "x",
y = "Density") +
scale_color_manual(values = c("#2dd4dc", "#092c86", "#f6546a"), name="Kernel") +
theme_bw() +
theme(    legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))
# COMPARE KERNELS
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_200 <- density(x, kernel = "gaussian", bw = 200)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_200 <- data.frame(x = d_gauss_200$x, y = d_gauss_200$y)
ggplot() +
geom_line(data = df_rect_300, aes(x = x, y = y, color = "Uniform kernel (b=300)")) +
geom_line(data = df_gauss_300, aes(x = x, y = y, color = "Gaussian kernel (b=300)")) +
geom_line(data = df_gauss_200, aes(x = x, y = y, color = "Gaussian kernel (b=100)")) +
labs(x = "x",
y = "Density") +
scale_color_manual(values = c("#2dd4dc", "#092c86", "#f6546a"), name="Kernel") +
theme_bw() +
theme(legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6)) +
ggsave("../doc/illustrate_kernel_choice.png")
# COMPARE KERNELS
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_200 <- density(x, kernel = "gaussian", bw = 200)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_200 <- data.frame(x = d_gauss_200$x, y = d_gauss_200$y)
ggplot() +
geom_line(data = df_rect_300, aes(x = x, y = y, color = "Uniform kernel (b=300)")) +
geom_line(data = df_gauss_300, aes(x = x, y = y, color = "Gaussian kernel (b=300)")) +
geom_line(data = df_gauss_200, aes(x = x, y = y, color = "Gaussian kernel (b=100)")) +
labs(x = "x",
y = "Density") +
scale_color_manual(values = c("#2dd4dc", "#092c86", "#f6546a"), name="Kernel") +
theme_bw() +
theme(legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))
ggsave("../doc/illustrate_kernel_choice.png")
# This code computes the log relative risk surface of chronic diseases, and investigate associated individual & neighborhood characteristics.
setwd("/mnt/data/GEOSAN/RESEARCH PROJECTS/GEOCHRONIC @ LASIG (EPFL)/GEOSAN-geochronic/src/")
require(svglite)
source('/mnt/data/GEOSAN/FUNCTIONS/GIRAPH-functions/geosan_funcs/password_utils.R')
source('descriptive/utils_spatial_clustering_outcomes.R')
con <- dbConnect(drv=RPostgreSQL::PostgreSQL(),host = "localhost",user= "aladoy",rstudioapi::askForPassword(),dbname="geosan")
# LOAD DATASETS -----------------------------------------------------------
indiv <- load_participants(con)
laus <- load_boundaries(con)
ha <- load_hectares(con)
dem <- raster("/mnt/data/GEOSAN/GEOSAN DB/data/MODELE NUMERIQUE HAUTEUR LAUSANNE/lausanne_dem_final_5m.tif")
# Basemap
build <- st_read(dsn="/mnt/data/GEOSAN/RESEARCH PROJECTS/COMMUNE EN SANTE @ UNISANTE/commune-en-sante/qgis/layers/admin_boundaries.gpkg", layer="vd_buildings")
build <- build %>% filter(st_intersects(., laus$extent, sparse = FALSE))
# Covariates
cov.indiv <- c("age", "sex", "swiss", "cohabiting", "education", "working", "difficulties", "smoking", "drinking", "inactivity")
cov.ha <- c("PTOT", "HTOT", "D_SPORT", "N_ACC_PED", "GREEN_SP", "NOISE", "PM25", "NO2", "P_65_M", "MEDREV", "R_UNEMP", "R_NN_POBL", "R_FFB", "R_NN_FRA", "AVG_PPH", "D_STOP_TOT")
compare_areas <- function(area_indiv, area_ha, cov_indiv, cov_ha){
for(bin_var in cov.indiv[!cov_indiv %in% c("age")]){
compare_risk_groups(area_indiv, bin_var, type="bin")
}
compare_risk_groups(area_indiv, "age", type="cont")
for(cont_var in cov_ha){
compare_risk_groups(area_ha, cont_var, type="cont")
}
}
compare_high_risk_area <- function(lrr, cov_indiv, cov_ha, excluded_polys=NULL){
hr_polys <- lrr$lrr.poly %>% filter(risk=="Higher risk") %>% pull(polyID)
for(id in hr_polys[!hr_polys %in% excluded_polys]){
cat("\n------------------------------------")
cat(paste("\nHIGH-RISK AREA N°", id, "\n"))
cat("------------------------------------\n")
area.ha <- lrr$lrr.ha %>% mutate(risk=factor(if_else(polyID==id, "high", "other"))) %>% select(-c(polyID))
stats <- area.ha %>% filter(risk=="high") %>% summarise(nPTOT=sum(PTOT, na.rm=TRUE), nHTOT = sum(HTOT, na.rm=TRUE))
cat(paste("PTOT: ", stats %>% pull(nPTOT), "HTOT", stats %>% pull(nHTOT), "\n"))
area.indiv <- lrr$lrr.indiv %>% mutate(risk=factor(if_else(polyID==id, "high", "other"))) %>% select(-c(polyID))
compare_areas(area.indiv, area.ha, cov.indiv, cov.ha)
}
}
# COMPARE KERNELS
x <- rnorm(100, mean = 0, sd = 1)
d_rect_300 <- density(x, kernel = "rectangular", bw = 300)
d_gauss_300 <- density(x, kernel = "gaussian", bw = 300)
d_gauss_200 <- density(x, kernel = "gaussian", bw = 200)
df_rect_300 <- data.frame(x = d_rect_300$x, y = d_rect_300$y)
df_gauss_300 <- data.frame(x = d_gauss_300$x, y = d_gauss_300$y)
df_gauss_200 <- data.frame(x = d_gauss_200$x, y = d_gauss_200$y)
ggplot() +
geom_line(data = df_rect_300, aes(x = x, y = y, color = "Uniform kernel (b=300)")) +
geom_line(data = df_gauss_300, aes(x = x, y = y, color = "Gaussian kernel (b=300)")) +
geom_line(data = df_gauss_200, aes(x = x, y = y, color = "Gaussian kernel (b=100)")) +
labs(x = "x",
y = "Density") +
scale_color_manual(values = c("#2dd4dc", "#092c86", "#f6546a"), name="Kernel") +
theme_bw() +
theme(legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6))
ggsave("../doc/illustrate_kernel_choice.png")
# DIABETES ----------------------------------------------------------------
sink("../results/spatial_disease_risk/diabetes/spatial_variation_risk_diabetes.txt")
cat(paste0("Date:", Sys.Date(),'\n')) #Overwrite the file
diab.data <- select_outcome_spatial(indiv, "diabetes", cov=cov.indiv)
plot_case_control(diab.data, laus$extent, build, title='Diabetes')
# Create PPP
diab.events <- create_ppp(diab.data, laus$extent, marks=diab.data$outcome, title="Diabetes - events")
# Log relative risk surface
optimal_bandwidths(diab.events)
diab.bandwidth <- 400
png(paste0("../results/spatial_disease_risk/diabetes/controls_density_diabetes", diab.bandwidth, ".png"),
width=300, height=200, units=c("mm"), res=100)
plot(diab.lrr$sparr_risk$f)
diab.lrr <- log_ratio_spatial_dens(diab.events, diab.bandwidth, nsim=999, seed=12345, outcome_name="diabetes")
