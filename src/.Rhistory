plot(cases.ppp, add=TRUE)
plot(controls.density)
plot(controls.ppp, add=TRUE)
par(mfrow = c(1, 2), mar = c(0,0,1.1,2))
plot(cases.density)
plot(cases.ppp, add=TRUE, pch=16)
plot(controls.density)
plot(controls.ppp, add=TRUE)
par(mfrow = c(1, 2), mar = c(0,0,1.1,2))
plot(cases.density)
plot(cases.ppp, add=TRUE, pch=16, cex=0.7)
plot(controls.density)
plot(controls.ppp, add=TRUE, pch=16, cex=0.7)
par(mfrow = c(1, 2), mar = c(0,0,1.1,2))
plot(cases.density)
plot(cases.ppp, add=TRUE, pch=16, cex=0.6, col='grey')
plot(controls.density)
plot(controls.ppp, add=TRUE, pch=16, cex=0.6, col='grey')
par(mfrow = c(1, 2), mar = c(0,0,1.1,2))
plot(cases.density)
plot(cases.ppp, add=TRUE, pch=3, cex=0.6, col='black')
plot(controls.density)
plot(controls.ppp, add=TRUE, pch=3, cex=0.6, col='black')
par(mfrow = c(1, 2), mar = c(0,0,1.1,2))
plot(cases.density)
plot(cases.ppp, add=TRUE, pch=3, cex=0.6, col='black', alpha=0.6)
plot(controls.density)
plot(controls.ppp, add=TRUE, pch=3, cex=0.6, col='black', alpha=0.6)
par(mfrow = c(1, 2), mar = c(0,0,1.1,2))
plot(cases.density)
plot(cases.ppp, add=TRUE, pch=3, cex=0.6, col='black', alpha=0.6)
plot(controls.density)
plot(controls.ppp, add=TRUE, pch=3, cex=0.6, col='black', alpha=0.4)
par(mfrow = c(1, 2), mar = c(0,0,1.1,2))
plot(cases.density)
plot(cases.ppp, add=TRUE, pch=3, cex=0.6, col='black', alpha=0.3)
plot(controls.density)
plot(controls.ppp, add=TRUE, pch=3, cex=0.6, col='black', alpha=0.3)
par(mfrow = c(1, 2), mar = c(0,0,1.1,2))
plot(cases.density)
plot(cases.ppp, add=TRUE, pch=3, cex=0.6, col='black', alpha=I(1/2))
plot(controls.density)
plot(controls.ppp, add=TRUE, pch=3, cex=0.6, col='black', alpha=I(1/2))
par(mfrow = c(1, 2), mar = c(0,0,1.1,2))
plot(cases.density)
plot(cases.ppp, add=TRUE, pch=1, cex=0.3, col='black', alpha=I(1/2))
plot(controls.density)
plot(controls.ppp, add=TRUE, pch=1, cex=0.3, col='black', alpha=I(1/2))
par(mfrow = c(1, 2), mar = c(0,0,1.1,2))
plot(cases.density, title='Diabetes Cases')
plot(cases.ppp, add=TRUE, pch=1, cex=0.3, col='black', alpha=I(1/2))
plot(controls.density, title='Diabetes Controls')
plot(controls.ppp, add=TRUE, pch=1, cex=0.3, col='black', alpha=I(1/2))
plot(cases.density, legend='Diabetes Cases')
plot(cases.density, title='Diabetes Cases')
plot(cases.density, main='Diabetes Cases')
par(mfrow = c(1, 2), mar = c(0,0,1.1,2))
plot(cases.density, main='Diabetes Cases')
plot(cases.ppp, add=TRUE, pch=1, cex=0.3, col='black', alpha=I(1/2))
plot(controls.density, main='Diabetes Controls')
plot(controls.ppp, add=TRUE, pch=1, cex=0.3, col='black', alpha=I(1/2))
cases.ppp
cases.ppp$n
par(mfrow = c(1, 2), mar = c(0,0,1.1,2))
plot(cases.density, main=paste('Cases (n= ', cases.ppp$n, ' )'))
plot(cases.ppp, add=TRUE, pch=1, cex=0.3, col='black', alpha=I(1/2))
plot(controls.density, main=paste('Controls (n= ', controls.ppp$n, ' )'))
plot(controls.ppp, add=TRUE, pch=1, cex=0.3, col='black', alpha=I(1/2))
?Kest
cases.density <- density.ppp(cases.ppp, sigma=bw.scott, at="pixels", edges=TRUE)
controls.density <- density.ppp(controls.ppp, sigma=bw.scott, at="pixels", edges=TRUE)
par(mfrow = c(1, 2), mar = c(0,0,1.1,2))
plot(cases.density, main=paste('Cases (n= ', cases.ppp$n, ' )'))
plot(cases.ppp, add=TRUE, pch=1, cex=0.3, col='black', alpha=I(1/2))
plot(controls.density, main=paste('Controls (n= ', controls.ppp$n, ' )'))
plot(controls.ppp, add=TRUE, pch=1, cex=0.3, col='black', alpha=I(1/2))
?llr
?lrr
??lrr
?relrisk.ppp
create_ppp <- function(df, subset="all"){
study_area = owin(range(df$x), range(df$y))
if(subset=="case"){
df <- df %>% filter(outcome=="case")
}
if(subset=="control"){
df <- df %>% filter(outcome=="control")
}
df <- ppp(df$x, df$y, window = study_area, marks=data$outcome)
return(df)
}
# Create point patterns for affe
cases.ppp <- create_ppp(data.laus, subset="case")
study_area = owin(range(df$x), range(df$y))
events.ppp <- ppp(data.laus$x, data.laus$y, window = study_area, marks=data.laus$outcome)
create_ppp <- function(df, subset="all"){
study_area = owin(range(df$x), range(df$y))
if(subset=="case"){
df <- df %>% filter(outcome=="case")
}
if(subset=="control"){
df <- df %>% filter(outcome=="control")
}
df <- ppp(df$x, df$y, window = study_area, marks=df$outcome)
return(df)
}
events.ppp <- create_ppp(data.laus, subset="all")
marks(events.ppp)
marks(cases.ppp)
# Create point patterns for affe
cases.ppp <- create_ppp(data.laus, subset="case")
controls.ppp <- create_ppp(data.laus, subset="control")
marks(controls.ppp)
plot(cases.ppp)
cases.density <- density.ppp(cases.ppp, sigma=bw.scott, at="pixels", edges=TRUE)
controls.density <- density.ppp(controls.ppp, sigma=bw.scott, at="pixels", edges=TRUE)
par(mfrow = c(1, 2), mar = c(0,0,1.1,2))
plot(cases.density, main=paste('Cases (n= ', cases.ppp$n, ' )'))
plot(cases.ppp, add=TRUE, pch=1, cex=0.3, col='black', alpha=I(1/2))
plot(controls.density, main=paste('Controls (n= ', controls.ppp$n, ' )'))
plot(controls.ppp, add=TRUE, pch=1, cex=0.3, col='black', alpha=I(1/2))
spp <- split(events.ppp)
?split
events.ppp
plot(events.ppp)
plot(split(events.ppp), main = "")
data <- read_sf(con, query="SELECT *, ST_X(geometry) as coordx, ST_Y(geometry) as coordy FROM geochronic.f2_study_dataset")
reli_laus <- tbl(con, sql("SELECT r.reli FROM reli_centroid r, lausanne_sectors s WHERE st_intersects(r.geometry, s.geometry)")) %>% pull()
# Add noise to points location to prevent duplicated points
data$x <- jitter(data$coordx)
data$y <- jitter(data$coordy)
# Test with diabetes
data <- data %>% mutate(outcome = factor(if_else(diabetes==1, "case", "control")))
data <- data %>% dplyr::select(pt, outcome, reli, x, y, geometry) %>% arrange(outcome)
data <- read_sf(con, query="SELECT *, ST_X(geometry) as coordx, ST_Y(geometry) as coordy FROM geochronic.f2_study_dataset")
library(tidyverse)
library(sf)
require(RPostgreSQL)
library(lme4)
library(spatstat)
source('/mnt/data/GEOSAN/FUNCTIONS/GIRAPH-functions/geosan_funcs/password_utils.R')
setwd("/mnt/data/GEOSAN/RESEARCH PROJECTS/GEOCHRONIC @ LASIG (EPFL)/GEOSAN-geochronic/src/")
#con <- dbConnect(drv=RPostgreSQL::PostgreSQL(),host = "localhost",user= "aladoy",askForPassword(),dbname="geosan")
con <- dbConnect(drv=RPostgreSQL::PostgreSQL(),host = "localhost",user= "aladoy",rstudioapi::askForPassword(),dbname="geosan")
# IMPORT DATA -------------------------------------------------------------
data <- read_sf(con, query="SELECT *, ST_X(geometry) as coordx, ST_Y(geometry) as coordy FROM geochronic.f2_study_dataset")
reli_laus <- tbl(con, sql("SELECT r.reli FROM reli_centroid r, lausanne_sectors s WHERE st_intersects(r.geometry, s.geometry)")) %>% pull()
# Add noise to points location to prevent duplicated points
data$x <- jitter(data$coordx)
data$y <- jitter(data$coordy)
# Test with diabetes
data <- data %>% mutate(outcome = factor(if_else(diabetes==1, "case", "control")))
data <- data %>% dplyr::select(pt, outcome, reli, x, y, geometry) %>% arrange(outcome)
data.laus <- data %>% filter(reli %in% reli_laus)
# Create point patterns for affe
cases.ppp <- create_ppp(data.laus, subset="case")
create_ppp <- function(df, subset="all"){
study_area = owin(range(df$x), range(df$y))
if(subset=="case"){
df <- df %>% filter(outcome=="case")
}
if(subset=="control"){
df <- df %>% filter(outcome=="control")
}
df <- ppp(df$x, df$y, window = study_area, marks=df$outcome)
return(df)
}
events.ppp <- create_ppp(data.laus, subset="all")
plot(events.ppp)
plot(split(events.ppp), main = "")
plot_case_control(split(data.laus))
plot_case_control <- function(df){
ggplot(df, aes(x = x, y = y, color = outcome)) +
geom_point(size=0.5) +
theme_bw() +
scale_color_manual(values = c("red", "blue"))
# ggplot() +
#   geom_sf(data = filter(df, outcome == "control"), color = "blue", size = 0.5) +
#   geom_sf(data = filter(df, outcome == "case"), color = "red", size = 0.5) +
#   theme_void()
}
plot_case_control(split(data.laus))
plot_case_control(data.laus)
plot(density.ppp((split(events.ppp)), sigma=bw.scott, at="pixels", edges=TRUE), main = "")
plot(density.ppp(split(events.ppp), sigma=bw.scott, at="pixels", edges=TRUE), main = "")
plot(density(split(events.ppp), sigma=bw.scott, at="pixels", edges=TRUE), main = "")
?relrisk
cases.density <- density.ppp(cases.ppp, sigma=bw.scott, at="pixels", edges=TRUE)
# Create point patterns for affe
cases.ppp <- create_ppp(data.laus, subset="case")
controls.ppp <- create_ppp(data.laus, subset="control")
cases.density <- density.ppp(cases.ppp, sigma=bw.scott, at="pixels", edges=TRUE)
controls.density <- density.ppp(controls.ppp, sigma=bw.scott, at="pixels", edges=TRUE)
bw.scott(cases.ppp, isotropic=FALSE, d=NULL)
447.5610^2
cases.density$varcovd
cases.density$varcov
cases.density$units$multiplier
varcov(cases.density)
bw.scott(cases.ppp, isotropic=FALSE, d=NULL)
bw.scott(controls.ppp, isotropic=FALSE, d=NULL)
?relrisk
relrisk(events.ppp, sigma=350, at="pixels", edge=TRUE)
spat_risk = relrisk(events.ppp, sigma=350, at="pixels", edge=TRUE)
plot(spat_risk)
spat_risk = relrisk(events.ppp, sigma=350, at="pixels", edge=TRUE, relative=TRUE)
plot(spat_risk)
spat_risk = relrisk(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE)
plot(spat_risk)
spat_risk = relrisk(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE)
plot(spat_risk)
spat_risk = relrisk(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, diggle=TRUE)
plot(spat_risk)
spat_risk = relrisk(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, diggle=TRUE, control=0)
marks(events.ppp)
spat_risk = relrisk(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, diggle=TRUE, control="control)
plot(spat_risk)
spat_risk = relrisk(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, diggle=TRUE, control="control")
spat_risk = relrisk(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, diggle=TRUE, control="control")
plot(spat_risk)
install.packages("smacpod")
install.packages("smacpod")
install.packages("smacpod")
update.packages(ask = FALSE, checkBuilt = TRUE)
renv::status()
install.packages("tidyverse")
install.packages("textshaping")
install.packages("textshaping")
install.packages("textshaping")
install.packages("tidyverse")
install.packages("smacpod")
library(smacpod)
?spdensity
library(tidyverse)
library(sf)
require(RPostgreSQL)
library(lme4)
library(spatstat)
library(smacpod)
source('/mnt/data/GEOSAN/FUNCTIONS/GIRAPH-functions/geosan_funcs/password_utils.R')
setwd("/mnt/data/GEOSAN/RESEARCH PROJECTS/GEOCHRONIC @ LASIG (EPFL)/GEOSAN-geochronic/src/")
#con <- dbConnect(drv=RPostgreSQL::PostgreSQL(),host = "localhost",user= "aladoy",askForPassword(),dbname="geosan")
con <- dbConnect(drv=RPostgreSQL::PostgreSQL(),host = "localhost",user= "aladoy",rstudioapi::askForPassword(),dbname="geosan")
# IMPORT DATA -------------------------------------------------------------
data <- read_sf(con, query="SELECT *, ST_X(geometry) as coordx, ST_Y(geometry) as coordy FROM geochronic.f2_study_dataset")
reli_laus <- tbl(con, sql("SELECT r.reli FROM reli_centroid r, lausanne_sectors s WHERE st_intersects(r.geometry, s.geometry)")) %>% pull()
# Add noise to points location to prevent duplicated points
data$x <- jitter(data$coordx)
data$y <- jitter(data$coordy)
# Test with diabetes
data <- data %>% mutate(outcome = factor(if_else(diabetes==1, "case", "control")))
# data <- data %>% dplyr::select(pt, outcome, reli, x, y, geometry) %>% arrange(outcome)
data <- read_sf(con, query="SELECT *, ST_X(geometry) as coordx, ST_Y(geometry) as coordy FROM geochronic.f2_study_dataset")
reli_laus <- tbl(con, sql("SELECT r.reli FROM reli_centroid r, lausanne_sectors s WHERE st_intersects(r.geometry, s.geometry)")) %>% pull()
# Add noise to points location to prevent duplicated points
data$x <- jitter(data$coordx)
data$y <- jitter(data$coordy)
# Test with diabetes
data <- data %>% mutate(outcome = factor(if_else(diabetes==1, "case", "control")))
data.laus <- data %>% filter(reli %in% reli_laus)
plot_case_control(data)
plot_case_control <- function(df){
ggplot(df, aes(x = x, y = y, color = outcome)) +
geom_point(size=0.5) +
theme_bw() +
scale_color_manual(values = c("red", "blue"))
# ggplot() +
#   geom_sf(data = filter(df, outcome == "control"), color = "blue", size = 0.5) +
#   geom_sf(data = filter(df, outcome == "case"), color = "red", size = 0.5) +
#   theme_void()
}
plot_case_control(data)
plot_case_control(data.laus)
?spdensity
create_ppp <- function(df, subset="all"){
study_area = owin(range(df$x), range(df$y))
if(subset=="case"){
df <- df %>% filter(outcome=="case")
}
if(subset=="control"){
df <- df %>% filter(outcome=="control")
}
df <- ppp(df$x, df$y, window = study_area, marks=df$outcome)
return(df)
}
# Create point patterns for affe
cases.ppp <- create_ppp(data.laus, subset="case")
controls.ppp <- create_ppp(data.laus, subset="control")
events.ppp <- create_ppp(data.laus, subset="all")
cases.density <- density.ppp(cases.ppp, sigma=bw.scott, at="pixels", edges=TRUE)
contour(cases.density)
spdensity(cases.ppp, sigma=bw.scott, at="pixels", edges=TRUE)
plot(spdensity(cases.ppp, sigma=bw.scott, at="pixels", edges=TRUE))
window <- read_sf(con, query="SELECT geometry FROM lausanne_sectors")
window <- read_sf(con, query="SELECT ST_Union(geometry) as geometry FROM lausanne_sectors")
?Window
study_area <- read_sf(con, query="SELECT ST_Union(geometry) as geometry FROM lausanne_sectors")
Window(study_area)
Window(study_area$geometry)
as.owin(study_area$geometry)
plot(study_area)
study_area <- read_sf(con, query="SELECT * FROM lausanne_sectors_extent")
as.owin(study_area$geometry)
plot(study_area)
as.owin(study_area$geometry)
simplify.owin(as.owin(study_area$geometry), 50)
plot(simplify.owin(as.owin(study_area$geometry), 50))
plot(simplify.owin(as.owin(study_area$geometry), 100))
plot(simplify.owin(as.owin(study_area$geometry), 50))
plot(simplify.owin(as.owin(study_area$geometry), 0))
plot(simplify.owin(as.owin(study_area$geometry), 50))
window <- simplify.owin(as.owin(study_area$geometry), 50)
study_area.df <- read_sf(con, query="SELECT * FROM lausanne_sectors_extent")
# Create Window for the point pattern
study_area.wind <- simplify.owin(as.owin(study_area$geometry), 50)
# Create Window for the point pattern
study_area.window <- simplify.owin(as.owin(study_area$geometry), 50)
# Create ppp
ppp(data.laus$x, data.laus$y, window = study_area.window, marks=data.laus$outcome)
data.alus <- tbl(con, sql("SELECT f.*, ST_X(f.geometry) as coordx, ST_Y(f.geometry) as coordy FROM geochronic.f2_study_dataset f, lausanne_region_mun l WHERE st_intersects(f.geometry, l.geometry)")) %>% pull()
data.laus <- tbl(con, sql("SELECT f.*, ST_X(f.geometry) as coordx, ST_Y(f.geometry) as coordy FROM geochronic.f2_study_dataset f, lausanne_region_mun l WHERE st_intersects(f.geometry, l.geometry)")) %>% pull()
data.laus <- read_sf(con, query="SELECT f.*, ST_X(f.geometry) as coordx, ST_Y(f.geometry) as coordy FROM geochronic.f2_study_dataset f, lausanne_region_mun l WHERE st_intersects(f.geometry, l.geometry)")
study_area.df <- read_sf(con, query="SELECT * FROM lausanne_sectors_extent")
data <- read_sf(con, query="SELECT *, ST_X(geometry) as coordx, ST_Y(geometry) as coordy FROM geochronic.f2_study_dataset")
data.laus <- read_sf(con, query="SELECT f.*, ST_X(f.geometry) as coordx, ST_Y(f.geometry) as coordy FROM geochronic.f2_study_dataset f, lausanne_region_mun l WHERE st_intersects(f.geometry, l.geometry)")
study_area.df <- read_sf(con, query="SELECT * FROM lausanne_region_mun")
con <- dbConnect(drv=RPostgreSQL::PostgreSQL(),host = "localhost",user= "aladoy",rstudioapi::askForPassword(),dbname="geosan")
# FUNCTIONS ---------------------------------------------------------------
plot_case_control <- function(df){
ggplot(df, aes(x = x, y = y, color = outcome)) +
geom_point(size=0.5) +
theme_bw() +
scale_color_manual(values = c("red", "blue"))
# ggplot() +
#   geom_sf(data = filter(df, outcome == "control"), color = "blue", size = 0.5) +
#   geom_sf(data = filter(df, outcome == "case"), color = "red", size = 0.5) +
#   theme_void()
}
# IMPORT DATA -------------------------------------------------------------
data.all <- read_sf(con, query="SELECT *, ST_X(geometry) as coordx, ST_Y(geometry) as coordy FROM geochronic.f2_study_dataset")
data.laus <- read_sf(con, query="SELECT f.*, ST_X(f.geometry) as coordx, ST_Y(f.geometry) as coordy FROM geochronic.f2_study_dataset f, lausanne_region_mun l WHERE st_intersects(f.geometry, l.geometry)")
study_area.df <- read_sf(con, query="SELECT * FROM lausanne_region_mun")
# Add noise to points location to prevent duplicated points
data.laus$x <- jitter(data.laus$coordx)
data.laus$y <- jitter(data.laus$coordy)
library(tidyverse)
library(sf)
require(RPostgreSQL)
library(spatstat)
library(smacpod)
source('/mnt/data/GEOSAN/FUNCTIONS/GIRAPH-functions/geosan_funcs/password_utils.R')
setwd("/mnt/data/GEOSAN/RESEARCH PROJECTS/GEOCHRONIC @ LASIG (EPFL)/GEOSAN-geochronic/src/")
#con <- dbConnect(drv=RPostgreSQL::PostgreSQL(),host = "localhost",user= "aladoy",askForPassword(),dbname="geosan")
con <- dbConnect(drv=RPostgreSQL::PostgreSQL(),host = "localhost",user= "aladoy",rstudioapi::askForPassword(),dbname="geosan")
# FUNCTIONS ---------------------------------------------------------------
plot_case_control <- function(df){
ggplot(df, aes(x = x, y = y, color = outcome)) +
geom_point(size=0.5) +
theme_bw() +
scale_color_manual(values = c("red", "blue"))
# ggplot() +
#   geom_sf(data = filter(df, outcome == "control"), color = "blue", size = 0.5) +
#   geom_sf(data = filter(df, outcome == "case"), color = "red", size = 0.5) +
#   theme_void()
}
# IMPORT DATA -------------------------------------------------------------
data.all <- read_sf(con, query="SELECT *, ST_X(geometry) as coordx, ST_Y(geometry) as coordy FROM geochronic.f2_study_dataset")
data.laus <- read_sf(con, query="SELECT f.*, ST_X(f.geometry) as coordx, ST_Y(f.geometry) as coordy FROM geochronic.f2_study_dataset f, lausanne_region_mun l WHERE st_intersects(f.geometry, l.geometry)")
study_area.df <- read_sf(con, query="SELECT * FROM lausanne_region_mun")
# Add noise to points location to prevent duplicated points
data.laus$x <- jitter(data.laus$coordx)
data.laus$y <- jitter(data.laus$coordy)
# Test with diabetes
data.laus <- data.laus %>% mutate(outcome = factor(if_else(diabetes==1, "case", "control")))
plot_case_control(data.laus)
data.all <- read_sf(con, query="SELECT *, ST_X(geometry) as coordx, ST_Y(geometry) as coordy FROM geochronic.f2_study_dataset")
data.laus <- read_sf(con, query="SELECT f.*, ST_X(f.geometry) as coordx, ST_Y(f.geometry) as coordy FROM geochronic.f2_study_dataset f, lausanne_sectors_extent l WHERE st_intersects(f.geometry, l.geometry)")
study_area.df <- read_sf(con, query="SELECT * FROM lausanne_sectors_extent")
# Add noise to points location to prevent duplicated points
data.laus$x <- jitter(data.laus$coordx)
data.laus$y <- jitter(data.laus$coordy)
# Test with diabetes
data.laus <- data.laus %>% mutate(outcome = factor(if_else(diabetes==1, "case", "control")))
plot_case_control(data.laus)
# Create Window for the point pattern
study_area.window <- simplify.owin(as.owin(study_area$geometry), 50)
# Create Window for the point pattern
study_area.window <- simplify.owin(as.owin(study_area.df$geometry), 50)
# Create ppp
ppp(data.laus$x, data.laus$y, window = study_area.window, marks=data.laus$outcome)
?ppp
create_ppp <- function(df, window, marks=NULL){
df <- ppp(df$x, df$y, window = window, marks=df$outcome)
return(df)
}
create_ppp <- function(df, window, marks=NULL){
df <- ppp(df$x, df$y, window = window, marks=marks)
return(df)
}
# Create ppp
events.ppp <- create_ppp(data.laus, study_area.window, marks=data.laus$outcom)
# Create ppp
events.ppp <- create_ppp(data.laus, study_area.window, marks=data.laus$outcome)
create_ppp <- function(df, window, marks=NULL){
df <- ppp(df$x, df$y, window = window, marks=marks)
return(df)
}
# Create ppp
events.ppp <- create_ppp(data.laus, study_area.window, marks=data.laus$outcome)
plot(events.ppp)
cases.ppp <- create_ppp(data.laus, study_area.window)
plot(cases.ppp)
cases.ppp <- create_ppp(data.laus %>% filter(outcome=='case'), study_area.window)
plot(cases.ppp)
controls.ppp <- create_ppp(data.laus %>% filter(outcome=='control'), study_area.window)
create_ppp <- function(df, window, marks=NULL){
df <- ppp(df$x, df$y, window = window, marks=marks)
plot(df)
return(df)
}
# Create ppp
events.ppp <- create_ppp(data.laus, study_area.window, marks=data.laus$outcome)
cases.ppp <- create_ppp(data.laus %>% filter(outcome=='case'), study_area.window)
controls.ppp <- create_ppp(data.laus %>% filter(outcome=='control'), study_area.window)
cases.ppp <- create_ppp(data.laus %>% filter(outcome=='case'), study_area.window, title="Cases")
create_ppp <- function(df, window, marks=NULL, title="Event locations"){
df <- ppp(df$x, df$y, window = window, marks=marks)
plot(df, main=title)
return(df)
}
events.ppp <- create_ppp(data.laus, study_area.window, marks=data.laus$outcome, title="Colaus Participants")
cases.ppp <- create_ppp(data.laus %>% filter(outcome=='case'), study_area.window, title="Cases")
controls.ppp <- create_ppp(data.laus %>% filter(outcome=='control'), study_area.window, title="Controls")
# Create ppp
events.ppp <- create_ppp(data.laus, study_area.window, marks=data.laus$outcome, title="Colaus Participants")
spdensity(cases.ppp)
plot(spdensity(cases.ppp))
plot(spdensity(cases.ppp, sigma=bw.scott, at="pixels", edges=TRUE))
plot(spdensity(controls.ppp, sigma=bw.scott, at="pixels", edges=TRUE))
spatial_density <- function(ppp, title="Spatial density of events"){
density <- spdensity(cases.ppp, sigma=bw.scott, at="pixels", edges=TRUE)
plot(density, main=title)
return(density)
}
# Spatial density of case-control events
spatial_density(cases.ppp)
# Spatial density of case-control events
spatial_density(cases.ppp, title="Spatial density of cases")
spatial_density(controls.ppp, title="Spatial density of controls")
# Log relative risk
lrr =  relrisk(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, diggle=TRUE, control="control")
lrr =  relrisk(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, diggle=TRUE, control="control")
plot(lrr, "Log relative risk of cases vs. controls")
contour(lrr, add=TRUE)
spatial_density(controls.ppp, title="Spatial density of controls")
controls.ppp <- create_ppp(data.laus %>% filter(outcome=='control'), study_area.window, title="Controls")
spatial_density(controls.ppp, title="Spatial density of controls")
# Spatial density of case-control events
spatial_density(cases.ppp, title="Spatial density of cases")
spatial_density <- function(ppp, title="Spatial density of events"){
density <- spdensity(ppp, sigma=bw.scott, at="pixels", edges=TRUE)
plot(density, main=title)
return(density)
}
# Create ppp
events.ppp <- create_ppp(data.laus, study_area.window, marks=data.laus$outcome, title="Colaus Participants")
cases.ppp <- create_ppp(data.laus %>% filter(outcome=='case'), study_area.window, title="Cases")
controls.ppp <- create_ppp(data.laus %>% filter(outcome=='control'), study_area.window, title="Controls")
# Spatial density of case-control events
spatial_density(cases.ppp, title="Spatial density of cases")
spatial_density(controls.ppp, title="Spatial density of controls")
lrr =  relrisk(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, diggle=TRUE, control="control")
plot(lrr, "Log relative risk of cases vs. controls")
contour(lrr, add=TRUE)
spatial_density <- function(ppp, title="Spatial density of events"){
density <- spdensity(ppp, sigma=bw.scott, at="pixels", edges=TRUE,  diggle=TRUE)
plot(density, main=title)
return(density)
}
# Spatial density of case-control events
spatial_density(cases.ppp, title="Spatial density of cases")
spatial_density(controls.ppp, title="Spatial density of controls")
# Log relative risk
lrr =  relrisk(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, diggle=TRUE, control="control")
plot(lrr, "Log relative risk of cases vs. controls")
contour(lrr, add=TRUE)
?logrr
# Test for random labelling hypothesis
logrr(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, diggle=FALSE, control="control", nsim=999, level=0.05)
lrr.signif = logrr(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, diggle=FALSE, control="control", nsim=999, level=0.05)
lrr.signif
lrr.signif
plot(lrr.signif)
?logrr.test
logrr.test(lrr.signif)
# Test for random labeling hypothesis
lrr.signif = logrr(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, diggle=FALSE, control="control", nsim=999, level=0.01)
lrr.signif
plot(lrr.signif)
# Test for random labeling hypothesis
lrr.signif = logrr(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, diggle=FALSE, control="control", nsim=999, level=0.9)
lrr.signif
plot(lrr.signif)
logrr.test(lrr.signif)
plot(lrr.signif)
# Test for random labeling hypothesis
lrr.signif = logrr(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, diggle=FALSE, nsim=999, level=0.9)
# Test for random labeling hypothesis
lrr.signif = logrr(events.ppp, sigma=350, at="pixels", edge=TRUE, casecontrol=TRUE, relative=TRUE, case="case", diggle=FALSE, nsim=999, level=0.9)
lrr.signif
plot(lrr.signif)
?logrr.test
