mean_values <- ha %>% st_drop_geometry() %>% select(all_of(cov)) %>% summarise(across(everything(), mean, na.rm = TRUE))
summary(mean_values)
std_values <- ha %>% st_drop_geometry() %>% select(all_of(cov)) %>% summarise(across(everything(), sd, na.rm = TRUE))
summary(std_values)
# CORRELATION -------------------------------------------------------------
data_scaled <- ha %>%
st_drop_geometry() %>%
dplyr::select(all_of(cov)) %>%
filter(complete.cases(.)) %>%
scale()
corr_matrix <- cor(data_scaled)
print(corr_matrix)
png("../results/env_characteristics/corrplot.png", bg="white", width=200, height=150, units=c("mm"), res=300)
corrplot(corr_matrix,tl.col = "black")
dev.off()
DBI::dbDisconnect(con)
require(tidyverse)
require(sf)
require(ggplot2)
require(viridis)
require(classInt)
require(ggspatial)
require(RPostgreSQL)
require(corrplot)
source('/mnt/data/GEOSAN/FUNCTIONS/GIRAPH-functions/geosan_funcs/password_utils.R')
setwd("/mnt/data/GEOSAN/RESEARCH PROJECTS/GEOCHRONIC @ LASIG (EPFL)/GEOSAN-geochronic/src/")
# con <- dbConnect(drv=RPostgreSQL::PostgreSQL(),host = "localhost",user= "aladoy",askForPassword(),dbname="geosan")
con <- dbConnect(drv=RPostgreSQL::PostgreSQL(),host = "localhost",user= "aladoy",rstudioapi::askForPassword(),dbname="geosan")
ha <- read_sf(con, query="SELECT reli, INTDEN, GREEN_SP, NOISE, PM25, NO2, MEDREV, R_UNEMP, R_NN_POBL, R_NN_CH, geometry FROM geochronic.ha_characteristics WHERE st_intersects(geometry, (SELECT geometry FROM lausanne_sectors_extent))")
#names(ha)[names(ha) != c("reli", "geometry")] <- toupper(names(ha)[names(ha) != c("reli", "geometry")])
columns_to_convert <- c("intden", "green_sp", "noise", "pm25", "no2", "medrev", "r_unemp", "r_nn_pobl", "r_nn_ch")
names(ha)[names(ha) %in% columns_to_convert] <- toupper(names(ha)[names(ha) %in% columns_to_convert])
lausanne <- read_sf(con, query="SELECT * FROM lausanne_sectors_extent")
lake_1 <- st_read("../qgis/lake_border_clean_1rst.geojson")
lake_2 <- st_read("../qgis/lake_border_clean_2nd.geojson")
# SPATIAL DISTRIBUTION ----------------------------------------------------
choropleth_map <- function(ha_df, ind_name, legend_name, title_name, class_type="pretty", save=TRUE){
breaks <- classIntervals(ha_df %>% pull(!!as.name(ind_name)), n = 5, style = class_type)
p <- ggplot() +
geom_sf(data = lausanne, color = "grey", fill = NA, lwd=1.5) +
geom_sf(data = lake_2, fill = "#c9e5f3", color = "#c9e5f3", alpha = 1) +
geom_sf(data = lake_1, fill = "#9fd1ea", color = "#9fd1ea", alpha = 0.7) +
geom_sf(data = ha_df, aes(fill = !!as.name(ind_name)), color = "white" , alpha=0.7) +
scale_fill_viridis(discrete = F,
name = legend_name,
breaks = breaks$brks,
labels = breaks$brks,
direction = 1,
guide = guide_colourbar(
direction = "horizontal",
barheight = unit(2, units = "mm"),
barwidth = unit(50, units = "mm"),
draw.ulim = F,
title.position = 'top',
title.hjust = 0.4,
label.hjust = 0.5)) +
theme_void() +
theme(plot.background = element_rect(fill = "#f5f5f2", color = NA),
panel.background = element_rect(fill = "#f5f5f2", color = NA),
plot.title = element_text(size = 15),
legend.position = c(0.2, 0.05),
legend.title = element_text(size = 12),
legend.text = element_text(size = 8),
text=element_text(family="Ubuntu Regular")) +
labs(x = NULL, y = NULL,
title = title_name,
#subtitle = "Source: Table QS502EW, Census 2011",
#caption = "Contains OS data Â© Crown copyright and database right (2018)"
) +
annotation_scale(location = "br", width_hint = 0.2, style="ticks")
ggsave(paste0("../results/env_characteristics/choropleth_", ind_name, ".png"),
bg="white", width=200, height=150, units=c("mm"), dpi=300)
return(p)
}
cov <- c("INTDEN", "GREEN_SP", "NOISE", "PM25", "NO2", "MEDREV", "R_UNEMP", "R_NN_POBL", "R_NN_CH")
choropleth_map(ha, "INTDEN", "Intersection Density (-)", "Street connectivity within a 500-meters radius buffer")
choropleth_map(ha, "GREEN_SP", "Greenness (%)", "Proportion of green spaces within a 500-meters radius buffer")
choropleth_map(ha, "NOISE", "Noise (dB)", "Nihgttime Traffic Noise Exposure within a 500-meters radius buffer")
choropleth_map(ha, "PM25", "Concentration (ug/m3)", "Exposure to PM2.5 within a 500-meters radius buffer")
choropleth_map(ha, "NO2", "Concentration (ug/m3)", "Exposure to NO2 within a 500-meters radius buffer")
choropleth_map(ha, "MEDREV", "Income (kCHF)", "Median annual income per household")
choropleth_map(ha, "R_UNEMP", "Rate (%)", "Unemployment rate for population aged 15 and above")
choropleth_map(ha, "R_NN_POBL", "Rate (%)", "Population aged 15+ with compulsory education")
choropleth_map(ha, "R_NN_CH", "Rate (%)", "Proportion of foreign population")
min_values <- ha %>% st_drop_geometry() %>% select(all_of(cov)) %>% summarise(across(everything(), min, na.rm = TRUE))
max_values <- ha %>% select(all_of(cov)) %>% st_drop_geometry() %>% summarise(across(everything(), max, na.rm = TRUE))
mean_values <- ha %>% st_drop_geometry() %>% select(all_of(cov)) %>% summarise(across(everything(), mean, na.rm = TRUE))
print(mean_values)
std_values <- ha %>% st_drop_geometry() %>% select(all_of(cov)) %>% summarise(across(everything(), sd, na.rm = TRUE))
print(std_values)
# CORRELATION -------------------------------------------------------------
data_scaled <- ha %>%
st_drop_geometry() %>%
dplyr::select(all_of(cov)) %>%
filter(complete.cases(.)) %>%
scale()
corr_matrix <- cor(data_scaled)
print(corr_matrix)
png("../results/env_characteristics/corrplot.png", bg="white", width=200, height=150, units=c("mm"), res=300)
corrplot(corr_matrix,tl.col = "black")
dev.off()
DBI::dbDisconnect(con)
View(mean_values)
View(std_values)
require(tidyverse)
require(sf)
require(ggplot2)
require(viridis)
require(classInt)
require(ggspatial)
require(RPostgreSQL)
source('modeling/utils_map_gwr_results.R')
setwd("/mnt/data/GEOSAN/RESEARCH PROJECTS/GEOCHRONIC @ LASIG (EPFL)/GEOSAN-geochronic/src/")
create_maps_outcome <- function(data, tol_contours, vars_list, outcome){
for (var in vars_list) {
map_coefficients(data, paste0("gwr_", var), outcome, tol_contours, type = "estimates", model="GWR")
map_coefficients(data, paste0("mgwr_", var), outcome, tol_contours, type = "estimates", model="MGWR")
map_coefficients(data, paste0("gwr_", var), outcome, tol_contours, type = "t-values", model="GWR")
map_coefficients(data, paste0("mgwr_", var), outcome, tol_contours, type = "t-values", model="MGWR")
map_association(data, paste0("gwr_", var, "_TC"), outcome, tol_contours, model="GWR")
map_association(data, paste0("mgwr_", var, "_TC"), outcome, tol_contours, model="MGWR")
}
}
# tc_columns <- names(gwr)[grep("_TC$", names(gwr))]
# lapply(tc_columns, function(var) gwr_map(gwr, var))
# Tolerance contours
hyp.tol <- st_read("../results/spatial_disease_risk/hypertension/f2/tolerance_contours_hypertension_200.geojson")
# GWR results
hyp.data <- st_read("../results/regression_models/hypertension/hypertension_adj_spatreg_results.gpkg")
# Variables with significant associations
hyp.interest <- c("intercept", "PM25", "MEDREV", "R_NN_CH")
# Few variations in bandwidths. It seems that all variables at a global level, and that GWR and MGWR do not show strong difference
map_association(hyp.data, "gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
map_association(hyp.data, "gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
map_association(hyp.data, "gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
plot_tol_contours(plot_basemap() , hyp.tol)
source('modeling/utils_map_gwr_results.R')
plot_tol_contours(plot_basemap() , hyp.tol)
plot_tol_contours(plot_basemap() , hyp.tol)
geom_sf(data = tol[tol$RISK == 0.01, ], linetype = "solid", color = "black", size=1) +
geom_sf(data = tol[tol$RISK == 0.05, ], linetype = "dashed", color = "black", size=1) +
scale_linetype_manual(values = c("0.01" = "solid", "0.05" = "dashed"),
guide = guide_legend(title = "High risk areas")) +
labs(linetype = "Tolerance Contours")
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], linetype = "solid", color = "black", size=1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], linetype = "dashed", color = "black", size=1) +
scale_linetype_manual(values = c("0.01" = "solid", "0.05" = "dashed"),
guide = guide_legend(title = "High risk areas")) +
labs(linetype = "Tolerance Contours")
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], linetype = "solid", color = "black", size=1)
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], linetype = "solid", color = "black", size=1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], linetype = "dashed", color = "black", size=1) +
scale_linetype_manual(values = c("0.01" = "solid", "0.05" = "dashed"),
guide = guide_legend(title = "High risk areas")) +
labs(linetype = "Tolerance Contours")
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "solid"), color = "black", size=1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "dashed"), color = "black", size=1) +
scale_linetype_manual(values = c("0.01" = "solid", "0.05" = "dashed"),
breaks = c("0.01", "0.05"),
labels = c("High risk areas (p<0.01)", "High risk areas (p<0.05)"),
guide = guide_legend(override.aes = list(alpha = c(1, 1), size = c(1, 1), color = "black"))) +
labs(linetype = "Tolerance Contours")
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "solid"), color = "black", size=1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "dashed"), color = "black", size=1) +
scale_linetype_manual(values = c(0.01 = "solid", 0.05 = "dashed"),
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "solid"), color = "black", size=1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "dashed"), color = "black", size=1) +
scale_linetype_manual(values = c("0.01" = "solid", "0.05" = "dashed"),
breaks = c(0.01, 0.05),
labels = c("High risk areas (p<0.01)", "High risk areas (p<0.05)"),
guide = guide_legend(override.aes = list(alpha = c(1, 1), size = c(1, 1), color = "black"))) +
labs(linetype = "Tolerance Contours")
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "solid"), color = "black", size=1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "dashed"), color = "black", size=1)
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "solid"), color = "black", size=1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "dashed"), color = "black", size=1) +
scale_linetype_manual(values = c("0.01" = "solid", "0.05" = "dashed"),
guide = guide_legend(title = "Tolerance Contours",
override.aes = list(color = c("black", "black"), size = c(1, 1))))
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "solid"), color = "black", size=1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "dashed"), color = "black", size=1) +
scale_linetype_manual(values = c("0.01" = "solid", "0.05" = "dashed"),
guide = guide_legend(title = "Tolerance Contours")
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "solid"), color = "black", size=1) +
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "solid"), color = "black", size=1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "dashed"), color = "black", size=1)
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "solid"), color = "black", size=1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "dashed"), color = "black", size=1) +
scale_linetype_manual(values = c("0.01" = "solid", "0.05" = "dashed"),
breaks = c("0.01", "0.05"),
labels = c("p=0.01", "p=0.05"),
guide = guide_legend(title = "Tolerance Contours",
override.aes = list(alpha = c(1, 1), size = c(1, 1), color = "black"))) +
labs(linetype = "Tolerance Contours")
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "solid"), color = "black", size=1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "dashed"), color = "black", size=1) +
scale_linetype_manual(values = c("0.01" = "solid", "0.05" = "dashed"),
guide = guide_legend(title = "Tolerance Contours",
override.aes = list(linetype = c("solid", "dashed"),
color = c("black", "black"),
size = c(1, 1))))
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "solid"), color = "black", size=1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "dashed"), color = "black", size=1) +
scale_linetype_manual(values = c(0.01 = "solid", 0.05 = "dashed"),
ggplot() + geom_sf(data = tol[tol$RISK == 0.01, ], aes(linetype = "0.01"), color = "black", size = 1) +
geom_sf(data = tol[tol$RISK == 0.05, ], aes(linetype = "0.05"), color = "black", size = 1) +
scale_linetype_manual(values = c("0.01" = "solid", "0.05" = "dashed"),
guide = guide_legend(title = "Tolerance Contours",
override.aes = list(color = "black", size = 1),
title.position = "top",
title.hjust = 0.5,
label.hjust = c(0.5, 0.5),
label = c("p=0.01", "p=0.05"))) +
labs(linetype = "Tolerance Contours")
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "0.01"), color = "black", size = 1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "0.05"), color = "black", size = 1) +
scale_linetype_manual(values = c("0.01" = "solid", "0.05" = "dashed"),
guide = guide_legend(title = "Tolerance Contours",
override.aes = list(color = "black", size = 1),
title.position = "top",
title.hjust = 0.5,
label.hjust = c(0.5, 0.5),
label = c("p=0.01", "p=0.05"))) +
labs(linetype = "Tolerance Contours")
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "0.01"), color = "black", size = 1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "0.05"), color = "black", size = 1) +
scale_linetype_manual(values = c("0.01" = "solid", "0.05" = "dashed"),
guide = guide_legend(title = "Tolerance Contours",
override.aes = list(color = "black", size = 1),
title.position = "top",
label = c("p=0.01", "p=0.05"))) +
labs(linetype = "Tolerance Contours")
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "0.01"), color = "black", size = 1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "0.05"), color = "black", size = 1) +
scale_linetype_manual(values = c("0.01" = "solid", "0.05" = "dashed"),
guide = guide_legend(title = "Tolerance Contours",
override.aes = list(color = "black", size = 1),
title.position = "top")) +
labs(linetype = "Tolerance Contours")
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "p=0.01"), color = "black", size = 1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "p=0.05"), color = "black", size = 1) +
scale_linetype_manual(values = c("p=0.01" = "solid", "p=0.05" = "dashed"),
guide = guide_legend(title = "Tolerance Contours",
override.aes = list(color = "black", size = 1),
title.position = "top")) +
labs(linetype = "Tolerance Contours")
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "99% Tolerance Interval"), color = "black", size = 1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "95% Tolerance Interval"), color = "black", size = 1) +
scale_linetype_manual(values = c("99% Tolerance Interval" = "solid", "95% Tolerance Interval" = "dashed"),
guide = guide_legend(title = "Tolerance Contours",
override.aes = list(color = "black", size = 1),
title.position = "top")) +
labs(linetype = "High-risk areas")
ggplot() + geom_sf(data = hyp.tol[hyp.tol$RISK == 0.01, ], aes(linetype = "99% Tolerance Interval"), color = "black", size = 1) +
geom_sf(data = hyp.tol[hyp.tol$RISK == 0.05, ], aes(linetype = "95% Tolerance Interval"), color = "black", size = 1) +
scale_linetype_manual(values = c("99% Tolerance Interval" = "solid", "95% Tolerance Interval" = "dashed"),
guide = guide_legend(title = "High-risk areas",
override.aes = list(color = "black", size = 1),
title.position = "top"))
source('modeling/utils_map_gwr_results.R')
map_association(hyp.data, "gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
create_maps_outcome(hyp.data, hyp.tol, hyp.interest, "hypertension")
labels <- st_read("../qgis/labels.gpkg")
plot_basemap + geom_sf_text(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, background = "white", alpha = 0.6)
plot_basemap() + geom_sf_text(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, background = "white", alpha = 0.6)
require(tidyverse)
require(sf)
require(ggplot2)
require(viridis)
require(classInt)
require(ggspatial)
require(RPostgreSQL)
source('modeling/utils_map_gwr_results.R')
setwd("/mnt/data/GEOSAN/RESEARCH PROJECTS/GEOCHRONIC @ LASIG (EPFL)/GEOSAN-geochronic/src/")
map_association(hyp.data,"gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
map_association(hyp.data,"gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
map_association(hyp.data,"gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
map_association(hyp.data,"gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
map_association(hyp.data,"gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
plot_basemap() %>%add_labels()
gggplot() +geom_label(data = labels, aes(label = Number), color = "black",
size = 3, label.padding = unit(0.3, "lines"), show.legend = FALSE,
fill = "white", alpha = 0.6, fontface = "bold")
ggplot() +geom_label(data = labels, aes(label = Number), color = "black",
size = 3, label.padding = unit(0.3, "lines"), show.legend = FALSE,
fill = "white", alpha = 0.6, fontface = "bold")
ggplot() + geom_label(data = labels, aes(x = x, y = y, label = Number), color = "black",
size = 3, label.padding = unit(0.3, "lines"), show.legend = FALSE,
fill = "white", alpha = 0.6, fontface = "bold")
ggplot() + geom_label(data = labels, aes(x = geometry$x, y = geometry$y, label = Number), color = "black",
size = 3, label.padding = unit(0.3, "lines"), show.legend = FALSE,
fill = "white", alpha = 0.6, fontface = "bold")
source('modeling/utils_map_gwr_results.R')
map_association(hyp.data,"gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
plot_basemap() %>%add_labels()
ggplot() +    geom_sf_text(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, alpha = 0.6)
plot_basemap() %>% add_labels()
p <- plot_basemap()
p <- add_labels(p)
p
plot_basemap() %>%  geom_sf_text(data = labels, aes(label = Number), color = "black",
size = 3
show.legend = FALSE)
plot_basemap() %>%  geom_sf_text(data = labels, aes(label = Number), color = "black",
size = 3)
plot_basemap() + geom_sf_text(data = labels, aes(label = Number), color = "black",
size = 3)
plot_basemap() +  geom_sf_text(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, alpha = 0.6)
p <- plot_basemap()
p <- add_labels(p)
p
source('modeling/utils_map_gwr_results.R')
map_association(hyp.data,"gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
map_association(hyp.data,"gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
plot_basemap() +  geom_label(data = labels, aes(x = geometry$x, y = geometry$y, label = Number),
color = "black", size = 3, hjust = 0.5, vjust = 0.5,
fill = "white", alpha = 0.6, fontface = "bold")
?geom_label
plot_basemap() +  geom_label(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, fontface = "bold")
plot_basemap() +  geom_label(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, fontface = "bold")
View(labels)
plot_basemap() +  geom_sf_label(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, fontface = "bold")
plot_basemap() +  geom_sf_label(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, fontface = "bold", alpha=0.6)
plot_basemap() +  geom_sf_label(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, fontface = "bold", alpha=0.6,
label.padding = unit(0, "lines"))
plot_basemap() +  geom_sf_label(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, fontface = "bold", alpha=0.6,
label.color = "white")
plot_basemap() +  geom_sf_label(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, fontface = "bold", alpha=0.6,
label.colour = "white")
plot_basemap() +  geom_sf_label(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, fontface = "bold", alpha=0.6,
colour = "white")
plot_basemap() +  geom_sf_label(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, fontface = "bold", alpha=0.6,
color = "white")
plot_basemap() +  geom_sf_label(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, fontface = "bold", alpha=0.6,
label.size = NA)
plot_basemap() +  geom_sf_label(data = labels, aes(label = Number), color = "black",
size = 3, hjust = 0.5, vjust = 0.5,
show.legend = FALSE, alpha=0.6,
label.size = NA)
source('modeling/utils_map_gwr_results.R')
map_association(hyp.data,"gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
tion
map_association(hyp.data,"gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
gc()
require(tidyverse)
require(sf)
require(ggplot2)
require(viridis)
require(classInt)
require(ggspatial)
require(RPostgreSQL)
source('modeling/utils_map_gwr_results.R')
setwd("/mnt/data/GEOSAN/RESEARCH PROJECTS/GEOCHRONIC @ LASIG (EPFL)/GEOSAN-geochronic/src/")
create_maps_outcome <- function(data, tol_contours, vars_list, outcome){
for (var in vars_list) {
map_coefficients(data, paste0("gwr_", var), outcome, tol_contours, type = "estimates", model="GWR")
map_coefficients(data, paste0("mgwr_", var), outcome, tol_contours, type = "estimates", model="MGWR")
map_coefficients(data, paste0("gwr_", var), outcome, tol_contours, type = "t-values", model="GWR")
map_coefficients(data, paste0("mgwr_", var), outcome, tol_contours, type = "t-values", model="MGWR")
map_association(data, paste0("gwr_", var, "_TC"), outcome, tol_contours, model="GWR")
map_association(data, paste0("mgwr_", var, "_TC"), outcome, tol_contours, model="MGWR")
}
}
# tc_columns <- names(gwr)[grep("_TC$", names(gwr))]
# lapply(tc_columns, function(var) gwr_map(gwr, var))
# Tolerance contours
hyp.tol <- st_read("../results/spatial_disease_risk/hypertension/f2/tolerance_contours_hypertension_200.geojson")
# GWR results
hyp.data <- st_read("../results/regression_models/hypertension/hypertension_adj_spatreg_results.gpkg")
# Variables with significant associations
hyp.interest <- c("intercept", "PM25", "MEDREV", "R_NN_CH")
# Few variations in bandwidths. It seems that all variables at a global level, and that GWR and MGWR do not show strong difference
create_maps_outcome(hyp.data, hyp.tol, hyp.interest, "hypertension")
map_condition_number(hyp.data, "hypertension", hyp.tol, model="gwr")
map_condition_number(hyp.data, "hypertension", hyp.tol, model="mgwr")
#map_association(hyp.data,"gwr_GREEN_SP_TC", "hypertension", hyp.tol, model="GWR")
require(tidyverse)
require(sf)
require(ggplot2)
require(viridis)
require(classInt)
require(ggspatial)
require(RPostgreSQL)
source('modeling/utils_map_gwr_results.R')
require(tidyverse)
require(sf)
require(ggplot2)
require(viridis)
require(classInt)
require(ggspatial)
require(RPostgreSQL)
source('modeling/utils_map_gwr_results.R')
setwd("/mnt/data/GEOSAN/RESEARCH PROJECTS/GEOCHRONIC @ LASIG (EPFL)/GEOSAN-geochronic/src/")
# Tolerance contours
hyp.tol <- st_read("../results/spatial_disease_risk/hypertension/f2/tolerance_contours_hypertension_200.geojson")
# GWR results
hyp.data <- st_read("../results/regression_models/hypertension/hypertension_adj_spatreg_results.gpkg")
# Variables with significant associations
hyp.interest <- c("intercept", "PM25", "MEDREV", "R_NN_CH")
# Few variations in bandwidths. It seems that all variables at a global level, and that GWR and MGWR do not show strong difference
map_coefficients(hyp.data,"mgwr_MEDREV_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
map_coefficients(hyp.data,"mgwr_MEDREV_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
map_coefficients(hyp.data,"mgwr_MEDREV_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
map_coefficients(hyp.data,"mgwr_MEDREV_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
map_coefficients(hyp.data,"mgwr_MEDREV_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
map_coefficients(hyp.data,"mgwr_MEDREV_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
map_coefficients(hyp.data,"mgwr_MEDREV_TC", "hypertension", hyp.tol, model="GWR")
source('modeling/utils_map_gwr_results.R')
map_coefficients(hyp.data,"mgwr_MEDREV_TC", "hypertension", hyp.tol, model="GWR")
require(tidyverse)
require(sf)
require(ggplot2)
require(viridis)
require(classInt)
require(ggspatial)
require(RPostgreSQL)
source('modeling/utils_map_gwr_results.R')
setwd("/mnt/data/GEOSAN/RESEARCH PROJECTS/GEOCHRONIC @ LASIG (EPFL)/GEOSAN-geochronic/src/")
create_maps_outcome <- function(data, tol_contours, vars_list, outcome){
for (var in vars_list) {
map_coefficients(data, paste0("gwr_", var), outcome, tol_contours, type = "estimates", model="GWR")
map_coefficients(data, paste0("mgwr_", var), outcome, tol_contours, type = "estimates", model="MGWR")
map_coefficients(data, paste0("gwr_", var), outcome, tol_contours, type = "t-values", model="GWR")
map_coefficients(data, paste0("mgwr_", var), outcome, tol_contours, type = "t-values", model="MGWR")
map_association(data, paste0("gwr_", var, "_TC"), outcome, tol_contours, model="GWR")
map_association(data, paste0("mgwr_", var, "_TC"), outcome, tol_contours, model="MGWR")
}
}
# tc_columns <- names(gwr)[grep("_TC$", names(gwr))]
# lapply(tc_columns, function(var) gwr_map(gwr, var))
# HYPERTENSION ------------------------------------------------------------
# Tolerance contours
hyp.tol <- st_read("../results/spatial_disease_risk/hypertension/f2/tolerance_contours_hypertension_200.geojson")
# GWR results
hyp.data <- st_read("../results/regression_models/hypertension/hypertension_adj_spatreg_results.gpkg")
# Variables with significant associations
hyp.interest <- c("intercept", "PM25", "MEDREV", "R_NN_CH")
# Few variations in bandwidths. It seems that all variables at a global level, and that GWR and MGWR do not show strong difference
create_maps_outcome(hyp.data, hyp.tol, hyp.interest, "hypertension")
map_condition_number(hyp.data, "hypertension", hyp.tol, model="gwr")
map_condition_number(hyp.data, "hypertension", hyp.tol, model="mgwr")
# Tolerance contours
obes.tol <- st_read("../results/spatial_disease_risk/obesity/f2/tolerance_contours_obesity_200_F2.geojson")
# GWR results
obes.data <- st_read("../results/regression_models/obesity/obesity_adj_spatreg_results.gpkg")
# Variables with significant associations
obes.interest <- c("intercept", "INTDEN", "GREEN_SP", "PM25", "NO2", "MEDREV", "R_UNEMP", "R_NN_POBL")
# Lot of variations between GWR and MGWR
create_maps_outcome(obes.data, obes.tol, obes.interest, "obesity")
map_condition_number(obes.data, "obesity", obes.tol, model="gwr")
map_condition_number(obes.data, "obesity", obes.tol, model="mgwr")
# DIABETES ----------------------------------------------------------------
# Tolerance contours
diab.tol <- st_read("../results/spatial_disease_risk/diabetes/f2/tolerance_contours_diabetes_200_F2.geojson")
# GWR results
diab.data <- st_read("../results/regression_models/diabetes/diabetes_adj_spatreg_results.gpkg")
# Variables with significant associations
diab.interest <- c("MEDREV", "R_NN_CH")
# Except for MEDREV that seem to act at a more local scale than what GWR was supposedly noticed, all variables act as global.
create_maps_outcome(diab.data, diab.tol, diab.interest, "diabetes")
map_condition_number(diab.data, "diabetes", diab.tol, model="gwr")
map_condition_number(diab.data, "diabetes", diab.tol, model="mgwr")
# DYSLIPIDEMIA ------------------------------------------------------------
# Tolerance contours
dys.tol <- st_read("../results/spatial_disease_risk/dyslipidemia/f2/tolerance_contours_dyslipidemia_200_F2.geojson")
# GWR results
dys.data <- st_read("../results/regression_models/dyslipidemia/dyslipidemia_adj_spatreg_results.gpkg")
map_condition_number(dys.data, "dyslipidemia", dys.tol, model="gwr")
map_condition_number(dys.data, "dyslipidemia", dys.tol, model="mgwr")
DBI::dbDisconnect(con)
